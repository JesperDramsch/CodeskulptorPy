#!/usr/bin/env python
# -*- coding: latin-1 -*-

"""
#Pong_excessive (April 29, 2015)
# Implementation of classic arcade game Pong

#My solution (with additions) of the mini-project #4 of the course
#https://www.coursera.org/course/interactivepython (Coursera 2013).

#Piece of SimpleGUICS2Pygame.
#https://bitbucket.org/OPiMedia/simpleguics2pygame

#GPLv3 --- Copyright (C) 2013, 2015 Justin Gosses
"""

try:
    import simplegui
except ImportError:
    import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

import random
import math

# ball physics code for generic 2D domain
# the functions inside() and normal() encode the shape of the ennvironment

# Canvas size
width = 900
height = 600

# Ball traits
radius = 20
color = "White"

COLOR_LIST = ["Tan", "Green", "Brown", "Turquoise", "Black", "Purple", "Pink", "Gray", "yellow"]
Size_List = [1,3, 5, 7, 9, 2, 4, 12, 15]

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 900 # 600 & 400
HEIGHT = 600       
BALL_RADIUS = 20
ball_pos = [WIDTH/2,HEIGHT/2]
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = 1
RIGHT = 2
ball_vel = [-50,0]
old_ball_poss = "center"
direction = "LEFT"
collision = "no"
right_player_count = 0
left_player_count = 0
ball_col = "White"
acc = [0,0]
computer_play_count = "no computer"
computer_playR_count = "no computer"
color = "white"
color_count = 0
teleport_count = 0
curveball_count = 0
paddle1_vel = [0,0]
paddle2_vel = [0,0]
too_many_balls_count = 0
ball_vel_temp = [0,0]
acc_temp = [0,0]
pause_count = 0
computer_poorly_count = 0
balllist = []



# math helper function
def dot(v, w):
    return v[0] * w[0] + v[1] * w[1]

class RectangularDomain:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.border = 2

    # return if bounding circle is inside the domain    
    def inside(self, center, radius):
        in_width = ((radius + self.border) < center[0] < 
                    (self.width - self.border - radius))
        in_height = ((radius + self.border) < center[1] < 
                     (self.height - self.border - radius))
        return in_width and in_height

    # return a unit normal to the domain boundary point nearest center
    def normal(self, center):
        left_dist = center[0]
        right_dist = self.width - center[0]
        top_dist = center[1]
        bottom_dist = self.height - center[1]
        if left_dist < min(right_dist, top_dist, bottom_dist):
            return (1, 0)
        elif right_dist < min(left_dist, top_dist, bottom_dist):
            return (-1, 0)
        elif top_dist < min(bottom_dist, left_dist, right_dist):
            return (0, 1)
        else:
            return (0, -1)

    # return random location
    def random_pos(self, radius):
        x = random.randrange(radius, self.width - radius - self.border)
        y = random.randrange(radius, self.height - radius - self.border)
        return [x, y]

    # Draw boundary of domain
    def draw(self, canvas):
        canvas.draw_polygon([[0, 0], [self.width, 0], 
                             [self.width, self.height], [0, self.height]],
                             self.border*2, "Red")
        
class CircularDomain:
    def __init__(self, center, radius):
        self.center = center
        self.radius = radius
        self.border = 2
        
    # return if bounding circle is inside the domain    
    def inside(self, center, radius):
        dx = center[0] - self.center[0]
        dy = center[1] - self.center[1]
        dr = math.sqrt(dx ** 2 + dy ** 2)
        return dr < (self.radius - radius - self.border)

    # return a unit normal to the domain boundary point nearest center
    def normal(self, center):
        dx = center[0] - self.center[0]
        dy = center[1] - self.center[1]
        dr = math.sqrt(dx ** 2 + dy ** 2)
        return [dx / dr, dy / dr]
    
    # return random location
    def random_pos(self, radius):
        r = random.random() * (self.radius - radius - self.border)
        theta = random.random() * 2 * math.pi
        x = r * math.cos(theta) + self.center[0]
        y = r * math.sin(theta) + self.center[1]
        return [x, y]
        
    # Draw boundary of domain
    def draw(self, canvas):
        canvas.draw_circle(self.center, self.radius, self.border*2, "Red")
    
class Ball:
    def __init__(self, radius, color, domain):
        self.radius = radius
        self.color = color
        self.domain = domain       
        self.pos = self.domain.random_pos(self.radius)
        self.vel = [random.random() + 1.9, random.random() + 1.9]
        
    # bounce
    def reflect(self):
        norm = self.domain.normal(self.pos)
        norm_length = dot(self.vel, norm)
        self.vel[0] = self.vel[0] - 2 * norm_length * norm[0]
        self.vel[1] = self.vel[1] - 2 * norm_length * norm[1]
    
    # update ball position
    def update(self):
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        if not self.domain.inside(self.pos, self.radius):
            self.reflect()

    # draw
    def draw(self, canvas):
        canvas.draw_circle(self.pos, self.radius, 1, 
                           self.color, self.color)
        canvas.draw_circle(self.pos, self.radius, 1, 
                           self.color, self.color)

# fields for bouncing balls to reflect off of:
field = RectangularDomain(width, height)
field2 = CircularDomain([width/2, height/2], 180)

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball():
    global ball_pos, ball_vel # these are vectors stored as lists
    global direction, LEFT, RIGHT, horz_speed, vert_speed, acc
    acc[1] = 0
    ball_pos = [WIDTH/2,HEIGHT/2]
    horz_speed = (float(random.randrange(120, 240)))/100
    vert_speed = (float(random.randrange(60, 180)))/100
    if direction == "LEFT":
        ball_vel = [horz_speed,-vert_speed]
    elif direction == "RIGHT":
        ball_vel = [-horz_speed, -vert_speed]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    global Height, balllist
    spawn_ball()
    paddle1_pos = [+HALF_PAD_WIDTH,HEIGHT/2]
    paddle2_pos = [WIDTH-HALF_PAD_WIDTH,HEIGHT/2]
    balllist = []

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global curveball_count, teleport_count
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "White", ball_col)
    reflection()
    update_ball()
    canvas.draw_polygon([[paddle1_pos[0]-HALF_PAD_WIDTH, paddle1_pos[1]-HALF_PAD_HEIGHT],
                         [paddle1_pos[0]+HALF_PAD_WIDTH, paddle1_pos[1]-HALF_PAD_HEIGHT],
                         [paddle1_pos[0]+HALF_PAD_WIDTH, paddle1_pos[1]+HALF_PAD_HEIGHT],
                         [paddle1_pos[0]-HALF_PAD_WIDTH, paddle1_pos[1]+HALF_PAD_HEIGHT]],
                         1, "White", "Red")
    canvas.draw_polygon([[paddle2_pos[0]-HALF_PAD_WIDTH, paddle2_pos[1]-HALF_PAD_HEIGHT],
                         [paddle2_pos[0]+HALF_PAD_WIDTH, paddle2_pos[1]-HALF_PAD_HEIGHT],
                         [paddle2_pos[0]+HALF_PAD_WIDTH, paddle2_pos[1]+HALF_PAD_HEIGHT],
                         [paddle2_pos[0]-HALF_PAD_WIDTH, paddle2_pos[1]+HALF_PAD_HEIGHT]],
                         2, "White", "Blue")
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    paddle_update()
    canvas.draw_text(("Left player = "+str(left_player_count)), (((WIDTH/2)-160), 20), 25, 'Red')
    canvas.draw_text((str(right_player_count)+ " = Right player"), (((WIDTH/2)+10), 20), 25, 'Blue')
    if teleport_count == 1:
        canvas.draw_polygon([(210,50),(260,50),(260,100),(210,100)],2,"Gray")
        canvas.draw_text("Teleport",(210,75),15,"Yellow")
    if curveball_count == 1:
        canvas.draw_polygon([(((WIDTH/2)-30),(HEIGHT*0.70)),(((WIDTH/2)+30),(HEIGHT*0.70)),(((WIDTH/2)+30),((HEIGHT*0.70)+60)),(((WIDTH/2)-30),((HEIGHT*0.70)+60))],2,"Gray")
        canvas.draw_text("Curveball!",(((WIDTH/2)-30),((HEIGHT*0.70)+30)),15,"Yellow")
    field.draw(canvas)
    field2.draw(canvas)
    for i in balllist:
        i.draw(canvas)
        i.update()
        
def update_ball():
    global ball_vel,acc, teleport_count, curveball_count, WIDTH, HEIGHT, ball_pos
        # Update ball position
    ball_vel[1] += acc[1]
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if teleport_count == 1 and (ball_pos[0]<260 and ball_pos[0]>210 and ball_pos[1]>50 and ball_pos[1]<100):
        ball_pos[0] = (random.randrange((WIDTH*0.30), (WIDTH*0.60)))
        ball_pos[1] = (random.randrange((HEIGHT*0.50), (HEIGHT*0.80)))
    if curveball_count == 1 and (ball_pos[0]>((WIDTH/2)-30) and ball_pos[0]<((WIDTH/2)+30) and ball_pos[1]>(HEIGHT*0.70) and ball_pos[1]<((HEIGHT*0.70)+60)):
        acc[1]=-0.03

# teleport function and counter
def teleport():
    global teleport_count
    teleport_count += 1
    if teleport_count == 2:
        teleport_count = 0


# curve ball function and counter
def curveball():
    global curveball_count, acc
    curveball_count += 1
    if curveball_count == 2:
        curveball_count = 0
        acc = [0,0]
    
# collide and reflect off of left hand side of canvas
def reflection():
    global old_ball_poss, collision
    coll_ball_pad()
    if (ball_pos[0] <= BALL_RADIUS+PAD_WIDTH) and (old_ball_poss == "center") and (collision == "yes"):
        ball_vel[0] = - ball_vel[0]
        old_ball_poss = "edge"
    elif (ball_pos[0] >= (WIDTH-1-BALL_RADIUS-PAD_WIDTH)) and (old_ball_poss == "center") and (collision == "yes"):
        ball_vel[0] = -ball_vel[0]
        old_ball_poss = "edge"
    elif (ball_pos[1] <= 0+BALL_RADIUS+PAD_WIDTH) and (old_ball_poss == "center"):
        ball_vel[1] = -ball_vel[1]
        old_ball_poss = "edge"
    elif (ball_pos[1] >= ((HEIGHT-1)-BALL_RADIUS-PAD_WIDTH)) and (old_ball_poss == "center"):
        ball_vel[1] = -ball_vel[1]
        old_ball_poss = "edge"
    else:
        old_ball_poss = "center"
        collision = "no"
   
    # update paddle's vertical position, keep paddle on the screen
def paddle_update(): 
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, ball_pos, computer_play_count, computer_playR_count
    global computer_poorly_count
    if computer_play_count == "computer plays":
        paddle1_pos[1] = ball_pos[1]
    if computer_playR_count == "computer plays":
        paddle2_pos[1] = ball_pos[1]
    if computer_play_count == "poorly":
        computer_poorly_count += (random.randrange(0,10))
        if computer_poorly_count > 100:
            paddle1_pos[1] = ball_pos[1]-(random.randint(-50,50))
            computer_poorly_count = 0
    elif ((paddle1_pos[1]+paddle1_vel[1]) > (HALF_PAD_HEIGHT)) and (
        (paddle1_pos[1]+paddle1_vel[1]) < (HEIGHT - HALF_PAD_HEIGHT)):
        paddle1_pos[1] += paddle1_vel[1]
    if ((paddle2_pos[1]+paddle2_vel[1]) > (HALF_PAD_HEIGHT)) and (
        (paddle2_pos[1]+paddle2_vel[1]) < (HEIGHT - HALF_PAD_HEIGHT)):
        paddle2_pos[1] += paddle2_vel[1]

def keydown(key):
    global paddle1_vel, paddle2_vel, paddle1_pos
    if (key==simplegui.KEY_MAP["W"]):
        paddle1_vel[1] = -4
    elif key==simplegui.KEY_MAP["S"]:
        paddle1_vel[1] = 4
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel[1] = -4
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel[1] = 4
    else:
        paddle1_vel[1] = 0
        paddle2_vel[1] = 0
                
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP["W"]:
        paddle1_vel[1] = 0
    elif key==simplegui.KEY_MAP["S"]:
        paddle1_vel[1] = 0
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel[1] = 0
    elif key==simplegui.KEY_MAP["down"]:
        paddle2_vel[1] = 0

def mult_110(n):
    return 5*n

# determine whether paddle and ball collide 
def coll_ball_pad():                                                                                            
    global ball_pos, paddle1_pos, paddle2_pos, HALF_PAD_WIDTH, HALF_PAD_HEIGHT, collision, right_player_count, left_player_count
    global direction, ball_vel, vert_speed, horz_speed, ball_col, color_count
    if (((ball_pos[1] < (paddle1_pos[1]+HALF_PAD_HEIGHT)) and (ball_pos[1] > (paddle1_pos[1]-HALF_PAD_HEIGHT)))) and (ball_pos[0] <= (PAD_WIDTH+BALL_RADIUS)):
        collision = "yes"
        ball_vel[0] += (ball_vel[0]*0.1)
        ball_vel[1] += (ball_vel[1]*0.1)
    elif (((ball_pos[1] < (paddle2_pos[1]+HALF_PAD_HEIGHT)) and (ball_pos[1] > (paddle2_pos[1]-HALF_PAD_HEIGHT)))) and (ball_pos[0] >= (WIDTH-(PAD_WIDTH+BALL_RADIUS))):
        collision = "yes"
        ball_vel[0] += (ball_vel[0]*0.1)
        ball_vel[1] += (ball_vel[1]*0.1)
    elif ball_pos[0] <= (PAD_WIDTH+BALL_RADIUS):
        right_player_count += 1
        if color_count == 0:
            ball_col = "Blue"
        collision = "no"
        direction = "LEFT"        
        LEFT = True
        spawn_ball() 
    elif ball_pos[0] >= (WIDTH-(PAD_WIDTH+BALL_RADIUS)):
        left_player_count += 1
        if color_count == 0:
            ball_col = "Red"
        direction = "RIGHT"
        RIGHT = True  
        collision = "no"
        spawn_ball()
        
def button_handler():
    global right_player_count, left_player_count
    new_game()
    left_player_count = 0
    right_player_count = 0
    horz_speed = 0
    vert_speed = 0

def comp_plays_button():
    global computer_play_count
    if computer_play_count == "no computer":
        computer_play_count = "computer plays"
    elif computer_play_count == "computer plays":
        computer_play_count = "no computer"
        
def comp_plays_buttonR():
    global computer_playR_count
    if computer_playR_count == "no computer":
        computer_playR_count = "computer plays"
    elif computer_playR_count == "computer plays":
        computer_playR_count = "no computer"

def input_handler(text_input):
    global color, ball_col, color_count
    color = text_input
    ball_col = color
    color_count = 1
    
def color_counter():
    global color_count
    color_count = 0


def too_many_balls():
    global balllist, too_many_balls_count, balllist
    if too_many_balls_count == 1:
        balllist = []
        too_many_balls_count = 0
    elif too_many_balls_count == 0:
        too_many_balls_count = 1
        for i in range(122):
            i = Ball(random.choice(Size_List), random.choice(COLOR_LIST), field)
            balllist.append(i)
          

def more_balls():
    global balllist, color
    for i in range(2):
        i = Ball(19, color, field)
        balllist.append(i)
        
def pause():
    global ball_vel, acc, ball_vel_temp, acc_temp, pause_count
    if pause_count == 0:
        ball_vel_temp = ball_vel
        acc_temp = acc
        ball_vel = [0,0]
        acc = [0,0]
        pause_count = 1
    elif pause_count == 1:
        ball_vel = ball_vel_temp
        acc = acc_temp
        pause_count = 0
              
def comp_plays_poorly():
    global computer_play_count
    if computer_play_count == "no computer":
        computer_play_count = "poorly"
    elif computer_play_count == "poorly":
        computer_play_count = "no computer"        
        
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
button1 = frame.add_button('New Game', button_handler, 150)  
button2 = frame.add_button('Computer Plays Left', comp_plays_button, 150)
button3b = frame.add_button('Computer Plays Left poorly', comp_plays_poorly, 150)
button6 = frame.add_button('Computer Plays Right', comp_plays_buttonR, 150)
button9 = frame.add_button('Pause Real Ball', pause, 150)
inp = frame.add_input("change ball's color", input_handler, 150)
button3 = frame.add_button('Normal Ball Color Scheme', color_counter, 150)
button4 = frame.add_button('Activate/Deactivate Teleport', teleport, 150)
button5 = frame.add_button('Activate/Deactivate Curveball', curveball, 150)
button7 = frame.add_button('Two More Balls', more_balls, 150)
button8 = frame.add_button('Too Many Balls (or none)', too_many_balls, 150)

frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

# start frame
new_game()
frame.start()

