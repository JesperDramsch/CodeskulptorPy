#version for offline test

# implementation of Spaceship - program template for RiceRocks
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
started = False

# global variables that effect play style
missile_speed = 6      #high is faster missile speed. 6 was original.
ship_speed = 0.2       #high number is faster speed. 0.2 was original speed.
ship_friction = 0.98   #lower is more friction, 1 is no friction. 99 was original value.
rock_speed = 5.0       #constant*0-1 range = vel. 1.0 was original value. 5 is very hard.
max_rocks = 12          #max number of rocks in game
sound_track_vol = 0.6  #level of sound track volume, 0-1
lives_at_start = 3     #the number of lives you get at start or restart
score_at_start = 0     #for cheating the score
missile_lifespan = 50  #the lifespan of the missiles that the ship shoots
high_score = 0

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        global missile_lifespan
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = missile_lifespan ### might need to take out?
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, missile_lifespan)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
# .ogg versions of sounds are also available, just replace .mp3 by .ogg
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
soundtrack.set_volume(sound_track_vol)
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p, q):
    return math.sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)


# Ship class
class Ship:

    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0], pos[1]]
        self.vel = [vel[0], vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()

    def get_radius(self):
        return self.radius
    def get_pos(self):
        return [self.pos[0],self.pos[1]]
        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]] , self.image_size,
                              self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                              self.pos, self.image_size, self.angle)
        # canvas.draw_circle(self.pos, self.radius, 1, "White", "White")

    def update(self):
        # update angle
        self.angle += self.angle_vel
        
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT

        # update velocity
        if self.thrust:
            acc = angle_to_vector(self.angle)
            self.vel[0] += acc[0] * ship_speed
            self.vel[1] += acc[1] * ship_speed
            
        self.vel[0] *= ship_friction
        self.vel[1] *= ship_friction

    def set_thrust(self, on):
        self.thrust = on
        if on:
            ship_thrust_sound.rewind()
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
       
    def increment_angle_vel(self):
        self.angle_vel += .05
        
    def decrement_angle_vel(self):
        self.angle_vel -= .05
        
    def shoot(self):
        global missile_group, missile_lifespan
        forward = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius * forward[0], self.pos[1] + self.radius * forward[1]]
        missile_vel = [self.vel[0] + missile_speed * forward[0], self.vel[1] + missile_speed * forward[1]]
        missile_group.add(Sprite(missile_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound))

        # Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
  
    def draw(self, canvas):
        if self.animated == True:
            current_rock_index = (self.age % self.lifespan) // 1
            self.image_center = [self.image_center[0] +  current_rock_index * 
                                 self.image_size[0], self.image_center[1]]
            canvas.draw_image(explosion_image, self.image_center, 
                              self.image_size, self.pos, self.image_size)  
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                          self.pos, self.image_size, self.angle)

    def update(self):
        # update angle
        self.angle += self.angle_vel
        
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        #update age of sprite
        self.age += 1
        if self.age <= self.lifespan:
            return False
        elif self.age > self.lifespan:
            return True
        
    def get_radius(self):
        return self.radius
    
    def get_pos(self):
        return [self.pos[0],self.pos[1]]
       
    def collide(self, other_object):
        two_rad = (self.get_radius() + other_object.get_radius()) 
        pos_dist = dist(self.get_pos(), other_object.get_pos())
        if two_rad >= pos_dist:
            print "collision"
            return True
        else:
            False

# helper function : group collide:
def group_collide(group, other_object):
    global explosion_group
    collision = False
    copy_group = set([])
    for i in group:
        if i.collide(other_object) == True:
            copy_group.add(i)
            collision = True
            print type(explosion_group)
            explosion_group.add(Sprite(i.get_pos(), [0,0], 0, 0, 
                                       explosion_image, explosion_info, 
                                       explosion_sound))            
    group.difference_update(copy_group) 
    return collision

# helper function: group_group_collide: sees if missiles collide with any rocks
def group_group_collide(group_m, group_r):
    global explosion_group
    group_m_copy = set([])
    group_r_copy = set([])
    collision2 = False
    for r in group_r:
        for m in group_m:
            if m.collide(r) == True:
                group_m_copy.add(m)
                group_r_copy.add(r)
                collision2 = True
                explosion_group.add(Sprite(r.get_pos(), [0,0], 0, 0, 
                                       explosion_image, explosion_info, 
                                       explosion_sound))   
    group_m.difference_update(group_m_copy)
    group_r.difference_update(group_r_copy)
    if collision2 == True:
        return True
    
# key handlers to control ship   
def keydown(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(True)
    elif key == simplegui.KEY_MAP['space']:
        my_ship.shoot()
        
def keyup(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.increment_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.decrement_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.set_thrust(False)
        
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started, lives
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    soundtrack.rewind()
    soundtrack.play()
    if (not started) and inwidth and inheight:
        lives = lives_at_start
        started = True

def draw(canvas):
    global time, started, score, lives, rock_group, high_score
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw UI
    canvas.draw_text("Lives", [50, 50], 22, "White")
    canvas.draw_text("Score", [(WIDTH-120), 50], 22, "White")
    canvas.draw_text("High Score", [((WIDTH/2)-25), 50], 12, "White")
    canvas.draw_text(str(lives), [50, 80], 22, "White")
    canvas.draw_text(str(score), [680, 80], 22, "White")
    canvas.draw_text(str(high_score), [(WIDTH/2), 80], 12, "White")

    # draw ship and sprites
    my_ship.draw(canvas)
    
    # update ship and sprites
    my_ship.update()
    if group_collide(rock_group, my_ship) == True:
        lives -= 1
    if group_group_collide(missile_group, rock_group) == True:
        score += 1
    #process sprite groups
    #update and draw objects in rock_group, missile_group, and explosion_group
    for i in rock_group:
        i.update()
        i.draw(canvas)
    missile_out = set([])
    for m in missile_group:
        if m.update() == True:
            missile_out.add(m)
        else: 
            nothing = []
        m.draw(canvas)    
    missile_group.difference_update(missile_out) 
    for e in explosion_group:
        e.draw(canvas)
        e.update()

    #reset if lives = 0
    if lives == 0:
        if score > high_score:
            high_score = score
        started = False
        
    # draw splash screen if not started
    if not started:
        score = score_at_start
        lives = lives_at_start
        #rock_group = ([])
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())

# timer handler that spawns a rock    
def rock_spawner():
    global rock_group, max_rocks, my_ship
    if len(rock_group) < max_rocks and started == True:
        rock_pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
        rock_vel = [random.random() * rock_speed - .3, random.random() * rock_speed - .3]
        rock_avel = random.random() * .2 - .1
        ship_rock_pos_dist0 = dist(my_ship.get_pos(),rock_pos)
        if ship_rock_pos_dist0 > (4*my_ship.get_radius()):
            rock_group.add(Sprite(rock_pos, rock_vel, 0, rock_avel, asteroid_image, asteroid_info))
    elif started == True:
        nothing = []
    else:
        while len(rock_group) > 0:
            rock_group.pop()
    
# initialize stuff
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rock_group = set([])
missile_group = set([])
explosion_group = set([])

#functions that changes key play parameters using frame text input
def ship_speed_func(text_input):
    global ship_speed
    ship_speed = float(text_input)
    return ship_speed

def max_rocks_func(text_input):
    global max_rocks
    max_rocks = float(text_input)
    return max_rocks

def ship_frict_func(text_input):
    global ship_friction
    ship_friction = float(text_input)
    return ship_friction

def lives_at_start_func(text_input):
    global lives_at_start
    lives_at_start = int(float(text_input)//1)
    if lives_at_start < 0:
        lives_at_start = lives_at_start*(-1)
    else: 
        lives_at_start
    return lives_at_start

def score_func(text_input):
    global score_at_start
    score_at_start = float(text_input)
    return score_at_start

def missile_lifespan_func(text_input):
    global missile_lifespan, missile_info
    missile_lifespan = float(text_input)
    missile_info = ImageInfo([5,5], [10, 10], 3, missile_lifespan)
    print missile_lifespan
    return missile_lifespan

# register handlers
frame.set_keyup_handler(keyup)
frame.set_keydown_handler(keydown)
frame.set_mouseclick_handler(click)
frame.set_draw_handler(draw)
inp_ship_speed = frame.add_input('Ship_Speed-initial=0.2', ship_speed_func, 50)
inp_ship_friction = frame.add_input('Ship_friction-initial=0.98', ship_frict_func, 50)
inp_max_rocks = frame.add_input('Max # of rocks-initial=12', max_rocks_func, 50)
inp_lives_at_start = frame.add_input('Lives at start-initial=3', lives_at_start_func, 50)
inp_score = frame.add_input('Score-initial=0', score_func, 50)
inp_missile_lifespan = frame.add_input('Missile Lifespan-initial=50', missile_lifespan_func, 50)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
